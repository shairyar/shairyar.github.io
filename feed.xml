<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://shairyar.github.io/</id><title>Shairyar Baig</title><subtitle>Hi there! My name is Shairyar Baig, I am a developer and I love tinkering with diferent programing languages &amp; hardware.</subtitle> <updated>2025-10-31T17:34:51+05:00</updated> <author> <name>Shairyar Baig</name> <uri>https://shairyar.github.io/</uri> </author><link rel="self" type="application/atom+xml" href="https://shairyar.github.io/feed.xml"/><link rel="alternate" type="text/html" hreflang="en" href="https://shairyar.github.io/"/> <generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator> <rights> © 2025 Shairyar Baig </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>Kubernetes Learning Path: Deploying Rails 8 with SolidQueue on Raspberry Pi k3s</title><link href="https://shairyar.github.io/posts/kubernetes-learning-path-rails-solidqueue-on-k3s/" rel="alternate" type="text/html" title="Kubernetes Learning Path: Deploying Rails 8 with SolidQueue on Raspberry Pi k3s" /><published>2025-10-31T14:00:00+05:00</published> <updated>2025-10-31T17:34:34+05:00</updated> <id>https://shairyar.github.io/posts/kubernetes-learning-path-rails-solidqueue-on-k3s/</id> <content type="text/html" src="https://shairyar.github.io/posts/kubernetes-learning-path-rails-solidqueue-on-k3s/" /> <author> <name>Shairyar Baig</name> </author> <category term="Kubernetes" /> <category term="Tutorial" /> <summary>Kubernetes Learning Path: Deploying Rails 8 with SolidQueue on Raspberry Pi k3s After setting up my 3-node Raspberry Pi k3s cluster in the previous post, I wanted to deploy something real—not just nginx demos, but an actual production-grade application. So I decided to deploy a Ruby on Rails 8 application with all the modern bells and whistles: PostgreSQL, background jobs with SolidQueue, data...</summary> </entry> <entry><title>Kubernetes Learning Path: Setting Up k3s on Raspberry Pi</title><link href="https://shairyar.github.io/posts/kubernetes-learning-path-k3s-on-raspberry-pi/" rel="alternate" type="text/html" title="Kubernetes Learning Path: Setting Up k3s on Raspberry Pi" /><published>2025-10-29T10:00:00+05:00</published> <updated>2025-10-29T10:00:00+05:00</updated> <id>https://shairyar.github.io/posts/kubernetes-learning-path-k3s-on-raspberry-pi/</id> <content type="text/html" src="https://shairyar.github.io/posts/kubernetes-learning-path-k3s-on-raspberry-pi/" /> <author> <name>Shairyar Baig</name> </author> <category term="Kubernetes" /> <category term="Tutorial" /> <summary>Kubernetes Learning Path: Setting Up k3s on Raspberry Pi After going through the first four parts of this series with k3d, I felt ready to take things to the next level. k3d is great for learning and local development, but there’s something different about running Kubernetes on actual hardware. You deal with real networking, real resource constraints, and real high availability scenarios that ...</summary> </entry> <entry><title>Kubernetes Learning Path: Understanding Port Mapping in k3d</title><link href="https://shairyar.github.io/posts/kubernetes-learning-path-port-mapping/" rel="alternate" type="text/html" title="Kubernetes Learning Path: Understanding Port Mapping in k3d" /><published>2025-10-23T10:00:00+05:00</published> <updated>2025-10-23T10:00:00+05:00</updated> <id>https://shairyar.github.io/posts/kubernetes-learning-path-port-mapping/</id> <content type="text/html" src="https://shairyar.github.io/posts/kubernetes-learning-path-port-mapping/" /> <author> <name>Shairyar Baig</name> </author> <category term="Kubernetes" /> <category term="Tutorial" /> <summary>Kubernetes Learning Path: Understanding Port Mapping in k3d In the previous posts, we’ve been using kubectl port-forward to access our applications. That works fine for testing, but it’s manual and you can only forward one service at a time. What if you want to run multiple services and access them all through different ports on your localhost? When I first started with k3d, I thought I could...</summary> </entry> <entry><title>Kubernetes Learning Path: Understanding Namespaces</title><link href="https://shairyar.github.io/posts/kubernetes-learning-path-namespaces/" rel="alternate" type="text/html" title="Kubernetes Learning Path: Understanding Namespaces" /><published>2025-10-20T10:00:00+05:00</published> <updated>2025-10-20T10:00:00+05:00</updated> <id>https://shairyar.github.io/posts/kubernetes-learning-path-namespaces/</id> <content type="text/html" src="https://shairyar.github.io/posts/kubernetes-learning-path-namespaces/" /> <author> <name>Shairyar Baig</name> </author> <category term="Kubernetes" /> <category term="Tutorial" /> <summary>Kubernetes Learning Path: Understanding Namespaces In the previous posts, we’ve deployed apps and managed configuration. But what happens when you want to run multiple environments on the same cluster? Maybe you’re running dev, staging, and prod all together, or different teams need to share the cluster without accidentally deleting each other’s stuff. That’s where namespaces come in. They’re...</summary> </entry> <entry><title>Kubernetes Learning Path: ConfigMaps and Secrets</title><link href="https://shairyar.github.io/posts/kubernetes-learning-path-configmaps-and-secrets/" rel="alternate" type="text/html" title="Kubernetes Learning Path: ConfigMaps and Secrets" /><published>2025-10-19T10:00:00+05:00</published> <updated>2025-10-20T15:26:58+05:00</updated> <id>https://shairyar.github.io/posts/kubernetes-learning-path-configmaps-and-secrets/</id> <content type="text/html" src="https://shairyar.github.io/posts/kubernetes-learning-path-configmaps-and-secrets/" /> <author> <name>Shairyar Baig</name> </author> <category term="Kubernetes" /> <category term="Tutorial" /> <summary>Kubernetes Learning Path: ConfigMaps and Secrets In the previous post, we deployed our first application to Kubernetes. But here’s the thing—real applications need configuration. Database URLs, API keys, feature flags, and other settings that change between environments. You definitely don’t want to hardcode these values into your container images. That would mean rebuilding your entire image...</summary> </entry> </feed>
